#+TITLE: Emacs Configuration
#+AUTHOR: Aaron Ceross
#+OPTIONS: ':true *:true toc:t
#+PROPERTY: header-args:elisp  :tangle ~/.emacs.d/init.el

* Introduction

This is my configuration file for Emacs.

* Package Management

There are a number of package managers which we can add to Emacs.

#+begin_src elisp
(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-refresh-contents))

(package-initialize)
#+end_src

** use-package

This is by and large one of the best packages out there for Emacs.

#+begin_src elisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
#+end_src

** auto-compile

#+begin_src elisp
(use-package auto-compile
  :ensure t
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+end_src

** auto-package-update

It may be a bit dangerous sometimes to have auto-updates for packages,
but so far so good.

#+begin_src elisp
(use-package auto-package-update
  :ensure t
  :bind ("C-x P" . auto-package-update-now)
  :config
  (setq auto-package-update-delete-old-versions t))
#+end_src

* General Settings

#+begin_src elisp
(setq user-full-name "Aaron Ceross")
#+end_src

#+begin_src elisp
(defconst awc/emacs-directory (concat (getenv "HOME") "/.emacs.d/"))

(defun awc/emacs-subdirectory (d)
  "D is the sub-directory."
  (expand-file-name d awc/emacs-directory))

;; Ensure that the backup and elisp directories are generated.
(let* ((subdirs '("elisp" "backups"))
       (fulldirs (mapcar (lambda (d) (awc/emacs-subdirectory d)) subdirs)))
  (dolist (dir fulldirs)
    (when (not (file-exists-p dir))
      (message "Make directory: %s" dir)
      (make-directory dir))))
#+end_src

** Custom file

While I like to have things done within the init and config files,
there are things that end up in the customisation file, so let's have
one of those.

#+begin_src elisp
(setq custom-file (expand-file-name "custom.el" awc/emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

While we are at it, let's arrange some of the default settings.

Of course, there are few packages that can help with the general
function of Emacs.

** restart-emacs

There are instances where I've had to restart Emacs and there is no
nice way to do it. I found a package that does that for me. Nice.

#+begin_src elisp
;; restart Emacs from within Emacs
(use-package restart-emacs
  :commands
  (restart-emacs))
#+end_src

** which-key

There are a great multitude of key-bindings and this is a handy
package that gives you a bit of a hint when you are stuck.

#+begin_src elisp
(use-package which-key
  :diminish which-key-mode
  :defer t
  :init (which-key-mode)
  :config
  (setq which-key-popup-type 'minibuffer)
  (setq which-key-compute-remaps t))
#+end_src
