#+TITLE: Emacs Configuration
#+AUTHOR: Aaron Ceross
#+OPTIONS: ':true *:true toc:t
#+PROPERTY: header-args:elisp  :tangle ~/.emacs.d/init.el

* Introduction

This is my configuration file for Emacs.

* Package Management

There are a number of package managers which we can add to Emacs.

#+begin_src elisp
(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-refresh-contents))

(package-initialize)
#+end_src

** use-package

This is by and large one of the best packages out there for Emacs.

#+begin_src elisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)

(setq use-package-always-ensure t)
#+end_src

** auto-compile

A [[https://github.com/emacscollective/auto-compile][package]] which provides a means to guarantee that Emacs does not load
outdated byte code files.

#+begin_src elisp
(use-package auto-compile
  :ensure t
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+end_src

** auto-package-update

It may be a bit dangerous sometimes to have auto-updates for packages,
but so far so good.

#+begin_src elisp
(use-package auto-package-update
  :ensure t
  :bind ("C-x P" . auto-package-update-now)
  :config
  (setq auto-package-update-delete-old-versions t))
#+end_src

* General Settings

#+begin_src elisp
(setq user-full-name "Aaron Ceross")
#+end_src

#+begin_src elisp
(defconst awc/emacs-directory (concat (getenv "HOME") "/.emacs.d/"))

(defun awc/emacs-subdirectory (d)
  "D is the sub-directory."
  (expand-file-name d awc/emacs-directory))

;; Ensure that the backup and elisp directories are generated.
(let* ((subdirs '("elisp" "backups"))
       (fulldirs (mapcar (lambda (d) (awc/emacs-subdirectory d)) subdirs)))
  (dolist (dir fulldirs)
    (when (not (file-exists-p dir))
      (message "Make directory: %s" dir)
      (make-directory dir))))
#+end_src

** Custom file

While I like to have things done within the init and config files,
there are things that end up in the customisation file, so let's have
one of those.

#+begin_src elisp
(setq custom-file (expand-file-name "custom.el" awc/emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

** User Interface

*** Basic settings

These are some of the basic windows settings I like. I strip away most
of the visual fluff like scrollbars, menus, and the splash
screen. I've commented what each setting does.

#+begin_src elisp
(when window-system
  ;; set the size of the emacs window
  (setq initial-frame-alist '((top . 0) (left . 0) (width . 83) (height . 37)))
  (setq inhibit-splash-screen t)  ; remove spash screen
  (tooltip-mode -1)               ; remove tooltip
  (tool-bar-mode -1)              ; remove toolbar
  (menu-bar-mode -1)              ; remove the menu bar
  (scroll-bar-mode -1)            ; remove the scrollbar
  (setq column-number-mode t)     ; display column numbers
  (blink-cursor-mode 0)           ; no blinking cursor
  )
;; see empty lines in the buffer
(setq-default indicate-empty-lines t)
(when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))

;; full path in title bar
(setq-default frame-title-format "%b (%f)")

;; answer yes or no question with a single letter
(defalias 'yes-or-no-p 'y-or-n-p)

;; highlight current line
(global-hl-line-mode 1)

;; highlight matching parenthesis
(show-paren-mode 1)

;; stop beeping at me
(setq visible-bell t)
#+end_src

Indent guides are always good.

#+begin_src elisp
(use-package indent-guide
  :diminish
  :config
  (indent-guide-global-mode)
  (setq indent-guide-char "|")
  (set-face-foreground 'indent-guide-face "cadet blue"))
#+end_src

When pasting into a buffer, I like to see which text was just inserted
as a way to keep track.

#+begin_src elisp
(use-package volatile-highlights
  :ensure t
  :diminish volatile-highlights-mode
  :config
  (volatile-highlights-mode t))
#+end_src

*** Theme

This is something that I sometimes end up faffing around with a
lot. Sometimes a theme looks OK in one language, but not another, or I
just get bored and want to look at something different. For this, I'd
recommend the [[https://chriskempson.github.io/base16/][base16 themes]]. These are quite good and there are lots to
choose from.

#+begin_src elisp
;; colour themes in base16,
(use-package base16-theme)
#+end_src

I like to have a lighter theme during the day and a darker theme at
night; this approach seems to alleviate eye strain during these
times. I have found that circadian is ideal for switching through
themes.

#+begin_src elisp
(use-package circadian
  :config
  (setq circadian-themes '(("7:00" . base16-github)
                           ("16:45" . base16-ia-dark)))
  (circadian-setup))
#+end_src

Ideally, I would like it to automatically shift the times based on
sunrise and sunset rather than manually setting the time; that
might be a project for later.

*** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][Rainbow delimiters]] are a good way to visually keep track of depth when
calling functions, etc. For lisp, I think it's almost essential as
the parentheses can pile up quick quickly. For other languages, it's
not as big of a deal, but they aren't distracting or anything.

#+begin_src elisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'ess-mode-hook 'rainbow-delimiters-mode))
#+end_src

** restart-emacs

I found a package provide a quick and easy command to restart Emacs
from within Emacs.

#+begin_src elisp
(use-package restart-emacs
  :commands
  (restart-emacs))
#+end_src

** which-key

There are a great multitude of key-bindings and this is a handy
package that gives you a bit of a hint when you are stuck.

#+begin_src elisp
(use-package which-key
  :diminish which-key-mode
  :defer t
  :init (which-key-mode)
  :config
  (setq which-key-popup-type 'minibuffer)
  (setq which-key-compute-remaps t))
#+end_src

* Navigation

I was quite happy with IDO for a long while but have now since moved
along to Ivy.

#+begin_src elisp
(use-package ivy
  :diminish ivy-mode
  :bind (("C-x b" . ivy-switch-buffer)
         :map ivy-minibuffer-map
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line))
  :config
  (ivy-mode 1)
  (setq ivy-display-style 'fancy)
  (setq ivy-dynamic-exhibit-delay-ms 200)
  (setq ivy-use-selectable-prompt t)
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
  (setq ivy-use-virtual-buffers t)
  (setq ivy-extra-directories nil))
#+end_src

Counsel description

#+begin_src elisp
(use-package counsel
  :ensure t
  :after ivy
  :bind (("M-x" . counsel-M-x)
         ("C-s" . counsel-grep-or-swiper)
         ("C-h v" . counsel-describe-variable)
         ("C-h f" . counsel-describe-function)
         ("C-x C-f" . counsel-find-file)))
#+end_src

Swiper DESCRIPTION NEEDED

#+begin_src elisp
(use-package swiper
  :ensure t
  :after ivy
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))
#+end_src

Avy DESCRIPTION NEEDED

#+begin_src elisp
(use-package avy
  :ensure t
  :bind (("C-;" . avy-goto-char)
         ("C-'" . avy-goto-line)
         ("M-g c" . avy-goto-char-2)
         ("M-g w" . avy-goto-word-1)
         ("M-g P" . avy-pop-mark)))
#+end_src

Window management DESCRIPTION NEEDED

#+begin_src elisp
(use-package ace-window
  :bind ("C-x o" . ace-window))

;; Windmove configuration
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

;; control window placement with C-c <arrow>
(use-package winner
  :init (winner-mode 1))
#+end_src
